name: Destroy Infrastructure

on:
  workflow_dispatch:   # ðŸ‘ˆ manual trigger only

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 518394500999.dkr.ecr.eu-central-1.amazonaws.com
      ECR_REPOSITORY: lawyal/flask-app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::518394500999:role/GitHubActionsRole
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cleanup stale Terraform locks
        run: |
          aws dynamodb scan --table-name terraform-locks --region eu-central-1 --query "Items[].LockID.S" --output text | \
          xargs -r -I {} aws dynamodb delete-item --table-name terraform-locks --key "{\"LockID\":{\"S\":\"{}\"}}" --region eu-central-1

      - name: Update kubeconfig for EKS (if cluster exists)
        run: |
          if aws eks describe-cluster --name lawyal-eks --region eu-central-1 >/dev/null 2>&1; then
            aws eks update-kubeconfig --region eu-central-1 --name lawyal-eks
          else
            echo "Cluster not found, skipping kubeconfig update"
          fi

      - name: Delete Kubernetes Workloads (if cluster exists)
        run: |
          if aws eks describe-cluster --name lawyal-eks --region eu-central-1 >/dev/null 2>&1; then
            kubectl delete svc flask-app --ignore-not-found || true
            kubectl delete deployment flask-app --ignore-not-found || true
          else
            echo "Cluster not found, skipping kubectl cleanup"
          fi

      - name: Force cleanup ENIs (if any remain)
        run: |
          VPC_ID=$(terraform output -raw vpc_id || echo "")
          if [ -n "$VPC_ID" ]; then
            aws ec2 describe-network-interfaces --region eu-central-1 --filters Name=vpc-id,Values=$VPC_ID \
              --query "NetworkInterfaces[].NetworkInterfaceId" --output text | \
              xargs -r -n1 aws ec2 delete-network-interface --network-interface-id || true
          fi

      - name: Force cleanup Security Groups in VPC
        run: |
          VPC_ID=$(terraform output -raw vpc_id || echo "")
          if [ -n "$VPC_ID" ]; then
            SG_IDS=$(aws ec2 describe-security-groups --region eu-central-1 --filters Name=vpc-id,Values=$VPC_ID --query "SecurityGroups[].GroupId" --output text)
            for SG in $SG_IDS; do
              echo "Deleting SG: $SG"
              aws ec2 delete-security-group --group-id $SG --region eu-central-1 || true
            done
          fi

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -parallelism=1
