      - name: Delete Kubernetes Services (ELBs/ENIs)
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name lawyal-eks || true
          kubectl delete svc flask-app --ignore-not-found || true
          helm uninstall flask-app || true

      - name: Delete EKS Nodegroups
        run: |
          CLUSTER_NAME=lawyal-eks
          NODEGROUPS=$(aws eks list-nodegroups --cluster-name $CLUSTER_NAME --region $AWS_REGION --query "nodegroups[]" --output text || echo "")
          if [ -n "$NODEGROUPS" ]; then
            for ng in $NODEGROUPS; do
              echo "Deleting nodegroup: $ng"
              aws eks delete-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $ng --region $AWS_REGION || true
              aws eks wait nodegroup-deleted --cluster-name $CLUSTER_NAME --nodegroup-name $ng --region $AWS_REGION || true
            done
          fi

      - name: Delete EKS Cluster
        run: |
          aws eks delete-cluster --name lawyal-eks --region $AWS_REGION || true
          aws eks wait cluster-deleted --name lawyal-eks --region $AWS_REGION || true

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -parallelism=1 || true

      - name: Final Cleanup
        run: |
          echo "Cleaning up stray ENIs..."
          aws ec2 describe-network-interfaces --region $AWS_REGION --query "NetworkInterfaces[].NetworkInterfaceId" --output text | \
          xargs -r -n1 aws ec2 delete-network-interface --network-interface-id || true

          echo "Cleaning up NAT gateways..."
          for nat in $(aws ec2 describe-nat-gateways --region $AWS_REGION --query "NatGateways[].NatGatewayId" --output text); do
            aws ec2 delete-nat-gateway --nat-gateway-id $nat --region $AWS_REGION || true
          done

          echo "Cleaning up IGWs..."
          for igw in $(aws ec2 describe-internet-gateways --region $AWS_REGION --query "InternetGateways[].InternetGatewayId" --output text); do
            VPC_ID=$(aws ec2 describe-internet-gateways --internet-gateway-ids $igw --region $AWS_REGION --query "InternetGateways[].Attachments[].VpcId" --output text)
            if [ -n "$VPC_ID" ]; then
              aws ec2 detach-internet-gateway --internet-gateway-id $igw --vpc-id $VPC_ID || true
            fi
            aws ec2 delete-internet-gateway --internet-gateway-id $igw --region $AWS_REGION || true
          done

          echo "Cleaning up subnets..."
          aws ec2 describe-subnets --region $AWS_REGION --query "Subnets[].SubnetId" --output text | \
          xargs -r -n1 aws ec2 delete-subnet --subnet-id || true

          echo "Cleaning up VPCs..."
          aws ec2 describe-vpcs --region $AWS_REGION --query "Vpcs[].VpcId" --output text | \
          xargs -r -n1 aws ec2 delete-vpc --vpc-id || true
