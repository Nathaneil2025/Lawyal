name: Destroy Infrastructure

on:
  workflow_dispatch:   # üëà manual trigger only

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-central-1
      CLUSTER_NAME: lawyal-eks
      ECR_REPOSITORY: lawyal/flask-app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::518394500999:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cleanup stale Terraform locks
        run: |
          LOCK_IDS=$(aws dynamodb scan \
            --table-name terraform-locks \
            --region $AWS_REGION \
            --query "Items[].LockID.S" \
            --output text || true)

          for id in $LOCK_IDS; do
            aws dynamodb delete-item \
              --table-name terraform-locks \
              --key "{\"LockID\":{\"S\":\"$id\"}}" \
              --region $AWS_REGION || true
          done

      - name: Uninstall Helm releases
        run: |
          helm uninstall flask-app || true
          kubectl delete svc flask-app --ignore-not-found || true

      - name: Delete EKS Nodegroups & Cluster
        run: |
          echo "üßπ Deleting EKS Nodegroups..."
          for ng in $(aws eks list-nodegroups --cluster-name $CLUSTER_NAME --region $AWS_REGION --query "nodegroups[]" --output text || true); do
            aws eks delete-nodegroup --cluster-name $CLUSTER_NAME --nodegroup-name $ng --region $AWS_REGION || true
            aws eks wait nodegroup-deleted --cluster-name $CLUSTER_NAME --nodegroup-name $ng --region $AWS_REGION || true
          done

          echo "üßπ Deleting EKS Cluster..."
          aws eks delete-cluster --name $CLUSTER_NAME --region $AWS_REGION || true

      - name: Wait for EKS Cluster Deletion
        run: |
          echo "‚è≥ Waiting until cluster is fully deleted..."
          aws eks wait cluster-deleted --name $CLUSTER_NAME --region $AWS_REGION || true
          echo "‚úÖ Cluster deletion confirmed."

      - name: Purge ECR repository
        run: |
          aws ecr list-images --repository-name $ECR_REPOSITORY --region $AWS_REGION --query 'imageIds[*]' --output json | \
          jq -c '.[]' | while read img; do
            aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --region $AWS_REGION --image-ids "$img" || true
          done
          aws ecr delete-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION --force || true

      - name: Force delete EKS-managed security groups
        run: |
          for sg in $(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=eks-cluster-sg-*" \
            --region $AWS_REGION \
            --query "SecurityGroups[].GroupId" --output text); do
              aws ec2 delete-security-group --group-id $sg --region $AWS_REGION || true
          done

      - name: Terraform Init
        run: terraform init -reconfigure

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -parallelism=1 || true

      - name: Final Force Cleanup (NATs, EIPs, routes, IGWs, ENIs, SGs, Subnets, VPCs)
        run: |
          for nat in $(aws ec2 describe-nat-gateways --region $AWS_REGION --query "NatGateways[].NatGatewayId" --output text); do
            aws ec2 delete-nat-gateway --nat-gateway-id $nat --region $AWS_REGION || true
          done

          for eip in $(aws ec2 describe-addresses --region $AWS_REGION --query "Addresses[].AllocationId" --output text); do
            aws ec2 release-address --allocation-id $eip --region $AWS_REGION || true
          done

          for rtb in $(aws ec2 describe-route-tables --region $AWS_REGION --query "RouteTables[].RouteTableId" --output text); do
            aws ec2 delete-route-table --route-table-id $rtb --region $AWS_REGION || true
          done

          for igw in $(aws ec2 describe-internet-gateways --region $AWS_REGION --query "InternetGateways[].InternetGatewayId" --output text); do
            VPC_ID=$(aws ec2 describe-internet-gateways --internet-gateway-ids $igw --region $AWS_REGION --query "InternetGateways[].Attachments[].VpcId" --output text)
            if [ -n "$VPC_ID" ]; then
              aws ec2 detach-internet-gateway --internet-gateway-id $igw --vpc-id $VPC_ID --region $AWS_REGION || true
            fi
            aws ec2 delete-internet-gateway --internet-gateway-id $igw --region $AWS_REGION || true
          done

          for eni in $(aws ec2 describe-network-interfaces --region $AWS_REGION --query "NetworkInterfaces[].NetworkInterfaceId" --output text); do
            aws ec2 delete-network-interface --network-interface-id $eni --region $AWS_REGION || true
          done

          for sg in $(aws ec2 describe-security-groups --region $AWS_REGION --query "SecurityGroups[?GroupName!='default'].GroupId" --output text); do
            aws ec2 delete-security-group --group-id $sg --region $AWS_REGION || true
          done

          for subnet in $(aws ec2 describe-subnets --region $AWS_REGION --query "Subnets[].SubnetId" --output text); do
            aws ec2 delete-subnet --subnet-id $subnet --region $AWS_REGION || true
          done

          for vpc in $(aws ec2 describe-vpcs --region $AWS_REGION --query "Vpcs[].VpcId" --output text); do
            aws ec2 delete-vpc --vpc-id $vpc --region $AWS_REGION || true
          done
