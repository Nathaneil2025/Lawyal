name: Destroy Infrastructure

on:
  workflow_dispatch:   # ðŸ‘ˆ manual trigger only

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 518394500999.dkr.ecr.eu-central-1.amazonaws.com
      ECR_REPOSITORY: lawyal/flask-app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::518394500999:role/GitHubActionsRole
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cleanup stale Terraform locks
        run: |
          echo "Checking for stale DynamoDB locks..."
          LOCK_IDS=$(aws dynamodb scan \
            --table-name terraform-locks \
            --region eu-central-1 \
            --query "Items[].LockID.S" \
            --output text || true)

          if [ -z "$LOCK_IDS" ]; then
            echo "âœ… No stale locks found."
          else
            for id in $LOCK_IDS; do
              echo "âš¡ Deleting stale lock: $id"
              aws dynamodb delete-item \
                --table-name terraform-locks \
                --key "{\"LockID\":{\"S\":\"$id\"}}" \
                --region eu-central-1 || true
            done
          fi

      - name: Uninstall Helm releases
        run: |
          echo "Uninstalling Helm release: flask-app"
          helm uninstall flask-app || true

      - name: Purge ECR repo
        run: |
          echo "Purging ECR images..."
          aws ecr list-images --repository-name $ECR_REPOSITORY --region eu-central-1 --query 'imageIds[*]' --output json | \
          jq -c '.[]' | while read img; do
            aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --region eu-central-1 --image-ids "$img" || true
          done
          aws ecr delete-repository --repository-name $ECR_REPOSITORY --region eu-central-1 --force || true

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -parallelism=1 || true

      - name: Force cleanup ENIs, EC2, SGs, IGW
        run: |
          echo "Cleaning up stray ENIs..."
          aws ec2 describe-network-interfaces --region eu-central-1 --query "NetworkInterfaces[].NetworkInterfaceId" --output text | \
          xargs -r -n1 aws ec2 delete-network-interface --network-interface-id || true

          echo "Cleaning up stray EC2 instances..."
          aws ec2 describe-instances --region eu-central-1 --query "Reservations[].Instances[].InstanceId" --output text | \
          xargs -r -n1 aws ec2 terminate-instances --instance-ids || true

          echo "Cleaning up stray security groups..."
          aws ec2 describe-security-groups --region eu-central-1 --query "SecurityGroups[?GroupName!='default'].GroupId" --output text | \
          xargs -r -n1 aws ec2 delete-security-group --group-id || true

          echo "Cleaning up stray Internet Gateways..."
          for igw in $(aws ec2 describe-internet-gateways --region eu-central-1 --query "InternetGateways[].InternetGatewayId" --output text); do
            VPC_ID=$(aws ec2 describe-internet-gateways --internet-gateway-ids $igw --region eu-central-1 --query "InternetGateways[].Attachments[].VpcId" --output text)
            if [ -n "$VPC_ID" ]; then
              aws ec2 detach-internet-gateway --internet-gateway-id $igw --vpc-id $VPC_ID || true
            fi
            aws ec2 delete-internet-gateway --internet-gateway-id $igw || true
          done

          echo "Cleaning up stray subnets..."
          aws ec2 describe-subnets --region eu-central-1 --query "Subnets[].SubnetId" --output text | \
          xargs -r -n1 aws ec2 delete-subnet --subnet-id || true

          echo "Cleaning up stray VPCs..."
          aws ec2 describe-vpcs --region eu-central-1 --query "Vpcs[].VpcId" --output text | \
          xargs -r -n1 aws ec2 delete-vpc --vpc-id || true
