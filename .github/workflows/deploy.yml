name: Deploy Infrastructure & App

on:
  workflow_dispatch:   # üëà manual trigger only

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: 518394500999.dkr.ecr.eu-central-1.amazonaws.com
      ECR_REPOSITORY: lawyal/flask-app
      IMAGE_TAG: sha-${{ github.sha }}   # traceable tag

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::518394500999:role/GitHubActionsRole
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cleanup stale Terraform locks
        run: |
          aws dynamodb scan --table-name terraform-locks --region eu-central-1 \
            --query "Items[].LockID.S" --output text | \
            xargs -r -I {} aws dynamodb delete-item \
              --table-name terraform-locks \
              --key "{\"LockID\":{\"S\":\"{}\"}}" \
              --region eu-central-1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Wait for EKS Cluster to be ACTIVE
        run: |
          CLUSTER_NAME=$(terraform output -raw eks_cluster_name)
          echo "Checking EKS cluster: $CLUSTER_NAME"
          for i in {1..30}; do
            STATUS=$(aws eks describe-cluster \
              --name $CLUSTER_NAME \
              --region eu-central-1 \
              --query "cluster.status" \
              --output text || echo "MISSING")
            echo "Cluster status: $STATUS"
            if [ "$STATUS" == "ACTIVE" ]; then
              echo "‚úÖ Cluster is ready."
              break
            fi
            echo "‚è≥ Waiting 30s for EKS to be ready..."
            sleep 30
          done

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name $(terraform output -raw eks_cluster_name) --region eu-central-1

      - name: Build & Push Docker image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy with Helm
        run: |
          helm upgrade --install flask-app ./helm/flask-app \
            --set image.repository=$ECR_REGISTRY/$ECR_REPOSITORY \
            --set image.tag=$IMAGE_TAG
