name: Infra Deploy (Infra + Docker Push)

on:
  workflow_dispatch:   # manual trigger only

permissions:
  id-token: write
  contents: read

jobs:
  infra:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-central-1
      ECR_REGISTRY: 518394500999.dkr.ecr.eu-central-1.amazonaws.com
      ECR_REPOSITORY: lawyal/flask-app
      IMAGE_TAG: sha-${{ github.sha }}
      CLUSTER_NAME: lawyal-eks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::518394500999:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cleanup stale Terraform locks
        run: |
          aws dynamodb scan --table-name terraform-locks --region $AWS_REGION \
            --query "Items[].LockID.S" --output text | \
            xargs -r -I {} aws dynamodb delete-item \
              --table-name terraform-locks \
              --key "{\"LockID\":{\"S\":\"{}\"}}" \
              --region $AWS_REGION

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply (Infra)
        run: terraform apply -auto-approve

      # ✅ Wait until cluster is really ACTIVE before continuing
      - name: Wait for EKS cluster
        run: |
          echo "⏳ Waiting for cluster to be ACTIVE..."
          aws eks wait cluster-active --name $CLUSTER_NAME --region $AWS_REGION
          echo "✅ Cluster is ACTIVE."

      # ✅ Update kubeconfig for kubectl access
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION

      # ✅ Apply aws-auth (from Terraform output or manifest)
      - name: Apply aws-auth ConfigMap
        run: |
          echo "⏳ Applying aws-auth ConfigMap..."
          kubectl apply -f <(terraform output -raw aws_auth_manifest)
          echo "✅ aws-auth applied."

      # ✅ Wait for all nodegroups to be ACTIVE
      - name: Wait for nodegroups
        run: |
          echo "⏳ Waiting for nodegroups to become ACTIVE..."
          for ng in $(aws eks list-nodegroups --cluster-name $CLUSTER_NAME --region $AWS_REGION --query "nodegroups[]" --output text); do
            echo "→ Waiting for $ng..."
            aws eks wait nodegroup-active --cluster-name $CLUSTER_NAME --nodegroup-name $ng --region $AWS_REGION
            echo "✅ Nodegroup $ng is ACTIVE."
          done

      # ✅ Build & push image after cluster + nodes are ready
      - name: Build & Push Docker image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
